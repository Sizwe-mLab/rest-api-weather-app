{"ast":null,"code":"var _jsxFileName = \"/workspaces/rest-api-weather-app/src/components/Dailyforecast.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dailyforecast = ({\n  forecastData\n}) => {\n  _s();\n  const [storedForecast, setStoredForecast] = useState(storedForecast);\n  useEffect(() => {\n    if (forecastData && forecastData.list) {\n      localStorage.setItem('dailyForecast', JSON.stringify(forecastData));\n      setStoredForecast(forecastData);\n    }\n  }, [forecastData]);\n  useEffect(() => {\n    const savedForecast = localStorage.getItem('dailyForecast');\n    if (savedForecast) {\n      setStoredForecast(JSON.parse(savedForecast));\n    }\n  }, []);\n  if (!storedForecast || !storedForecast.list) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No forecast data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  const getDayOfWeek = timestamp => {\n    const date = new Date(timestamp * 1000);\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return days[date.getDay()];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Daily Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: storedForecast.list.slice(0, 5).map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: getDayOfWeek(item.dt)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", item.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Dailyforecast, \"H/qGV+1lfF4bfmNsmbvD+W34+MQ=\");\n_c = Dailyforecast;\nexport default Dailyforecast;\nvar _c;\n$RefreshReg$(_c, \"Dailyforecast\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Dailyforecast","forecastData","_s","storedForecast","setStoredForecast","list","localStorage","setItem","JSON","stringify","savedForecast","getItem","parse","children","fileName","_jsxFileName","lineNumber","columnNumber","getDayOfWeek","timestamp","date","Date","days","getDay","slice","map","item","index","dt","main","temp","_c","$RefreshReg$"],"sources":["/workspaces/rest-api-weather-app/src/components/Dailyforecast.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Dailyforecast = ({ forecastData }) => {\n  const [storedForecast, setStoredForecast] = useState(storedForecast);\n\n  useEffect(() => {\n    \n    if (forecastData && forecastData.list) {\n      localStorage.setItem('dailyForecast', JSON.stringify(forecastData));\n      setStoredForecast(forecastData);\n    }\n  }, [forecastData]);\n\n  useEffect(() => {\n    \n    const savedForecast = localStorage.getItem('dailyForecast');\n    if (savedForecast) {\n      setStoredForecast(JSON.parse(savedForecast));\n    }\n  }, []);\n\n  if (!storedForecast || !storedForecast.list) {\n    return <p>No forecast data available.</p>;\n  }\n\n  const getDayOfWeek = (timestamp) => {\n    const date = new Date(timestamp * 1000);\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return days[date.getDay()];\n  };\n\n  return (\n    <div>\n      <h2>Daily Forecast</h2>\n      <ul>\n        {storedForecast.list.slice(0, 5).map((item, index) => (\n          <li key={index}>\n            <p>{getDayOfWeek(item.dt)}</p>\n            <p>Temperature: {item.main.temp}Â°C</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Dailyforecast;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAACM,cAAc,CAAC;EAEpEP,SAAS,CAAC,MAAM;IAEd,IAAIK,YAAY,IAAIA,YAAY,CAACI,IAAI,EAAE;MACrCC,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MACnEG,iBAAiB,CAACH,YAAY,CAAC;IACjC;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBL,SAAS,CAAC,MAAM;IAEd,MAAMc,aAAa,GAAGJ,YAAY,CAACK,OAAO,CAAC,eAAe,CAAC;IAC3D,IAAID,aAAa,EAAE;MACjBN,iBAAiB,CAACI,IAAI,CAACI,KAAK,CAACF,aAAa,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACP,cAAc,IAAI,CAACA,cAAc,CAACE,IAAI,EAAE;IAC3C,oBAAON,OAAA;MAAAc,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3C;EAEA,MAAMC,YAAY,GAAIC,SAAS,IAAK;IAClC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,GAAG,IAAI,CAAC;IACvC,MAAMG,IAAI,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;IAC3F,OAAOA,IAAI,CAACF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED,oBACExB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBlB,OAAA;MAAAc,QAAA,EACGV,cAAc,CAACE,IAAI,CAACmB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC/C5B,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAAc,QAAA,EAAIK,YAAY,CAACQ,IAAI,CAACE,EAAE;QAAC;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BlB,OAAA;UAAAc,QAAA,GAAG,eAAa,EAACa,IAAI,CAACG,IAAI,CAACC,IAAI,EAAC,OAAE;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GAF/BU,KAAK;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACf,EAAA,CA1CIF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA4CnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}