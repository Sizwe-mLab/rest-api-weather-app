{"ast":null,"code":"var _jsxFileName = \"/workspaces/rest-api-weather-app/src/components/Hourlyforecast.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hourlyforecast = ({\n  forecastData\n}) => {\n  _s();\n  const [storedForecastData, setStoredForecastData] = useState([]);\n  useEffect(() => {\n    // Save forecast data to local storage\n    if (forecastData && forecastData.list) {\n      localStorage.setItem('hourlyForecast', JSON.stringify(forecastData));\n      setStoredForecastData(forecastData);\n    }\n  }, [forecastData]);\n  useEffect(() => {\n    // Retrieve forecast data from local storage\n    const savedForecastData = localStorage.getItem('hourlyForecast');\n    if (savedForecastData) {\n      setStoredForecastData(JSON.parse(savedForecastData));\n    }\n  }, []);\n  if (!storedForecastData || !storedForecastData.list) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No forecast data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hourly Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: storedForecastData.list.slice(0, 4).map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: new Date(item.dt * 1000).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", item.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, item.dt, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Hourlyforecast, \"ulp8j+R/pXOwvQRgYJr+NScnU34=\");\n_c = Hourlyforecast;\nexport default Hourlyforecast;\nvar _c;\n$RefreshReg$(_c, \"Hourlyforecast\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Hourlyforecast","forecastData","_s","storedForecastData","setStoredForecastData","list","localStorage","setItem","JSON","stringify","savedForecastData","getItem","parse","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","item","Date","dt","toLocaleTimeString","main","temp","_c","$RefreshReg$"],"sources":["/workspaces/rest-api-weather-app/src/components/Hourlyforecast.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst Hourlyforecast = ({ forecastData }) => {\n  const [storedForecastData, setStoredForecastData] = useState([]);\n\n  useEffect(() => {\n    // Save forecast data to local storage\n    if (forecastData && forecastData.list) {\n      localStorage.setItem('hourlyForecast', JSON.stringify(forecastData));\n      setStoredForecastData(forecastData);\n    }\n  }, [forecastData]);\n\n  useEffect(() => {\n    // Retrieve forecast data from local storage\n    const savedForecastData = localStorage.getItem('hourlyForecast');\n    if (savedForecastData) {\n      setStoredForecastData(JSON.parse(savedForecastData));\n    }\n  }, []);\n\n  if (!storedForecastData || !storedForecastData.list) {\n    return <p>No forecast data available.</p>;\n  }\n\n  return (\n    <div>\n      <h2>Hourly Forecast</h2>\n      <ul>\n        {storedForecastData.list.slice(0, 4).map((item) => (\n          <li key={item.dt}>\n            <p>{new Date(item.dt * 1000).toLocaleTimeString()}</p>\n            <p>Temperature: {item.main.temp}Â°C</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Hourlyforecast;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhED,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,YAAY,IAAIA,YAAY,CAACI,IAAI,EAAE;MACrCC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAACR,YAAY,CAAC,CAAC;MACpEG,qBAAqB,CAACH,YAAY,CAAC;IACrC;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBL,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,iBAAiB,GAAGJ,YAAY,CAACK,OAAO,CAAC,gBAAgB,CAAC;IAChE,IAAID,iBAAiB,EAAE;MACrBN,qBAAqB,CAACI,IAAI,CAACI,KAAK,CAACF,iBAAiB,CAAC,CAAC;IACtD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACP,kBAAkB,IAAI,CAACA,kBAAkB,CAACE,IAAI,EAAE;IACnD,oBAAON,OAAA;MAAAc,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3C;EAEA,oBACElB,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBlB,OAAA;MAAAc,QAAA,EACGV,kBAAkB,CAACE,IAAI,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,IAAI,iBAC5CrB,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAAc,QAAA,EAAI,IAAIQ,IAAI,CAACD,IAAI,CAACE,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC;QAAC;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtDlB,OAAA;UAAAc,QAAA,GAAG,eAAa,EAACO,IAAI,CAACI,IAAI,CAACC,IAAI,EAAC,OAAE;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GAF/BG,IAAI,CAACE,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACf,EAAA,CApCIF,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAsCpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}