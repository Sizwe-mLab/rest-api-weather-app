{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eKasi Lab\\\\Desktop\\\\rest-api-weather-app-1\\\\src\\\\components\\\\Hourlyforecast.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hourlyforecast = ({\n  forecastData\n}) => {\n  _s();\n  const [storedData, setStoredData] = useState(null);\n  useEffect(() => {\n    const savedData = localStorage.getItem('forecastData');\n    if (savedData) {\n      setStoredData(JSON.parse(savedData));\n    }\n  }, []);\n  useEffect(() => {\n    if (forecastData && forecastData.list) {\n      localStorage.setItem('forecastData', JSON.stringify(forecastData));\n      setStoredData(forecastData);\n    }\n  }, [forecastData]);\n  const dataToDisplay = storedData ? storedData.list.slice(0, 4) : [];\n  if (dataToDisplay.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No forecast data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Hourly Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: forecastData.list.slice(0, 4).map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: new Date(item.dt * 1000).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Temperature: \", item.main.temp, \"\\xB0C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this)]\n      }, item.dt, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Hourlyforecast, \"MiWusnEbkyx4A74dWb+MTMFMAY4=\");\n_c = Hourlyforecast;\nexport default Hourlyforecast;\nvar _c;\n$RefreshReg$(_c, \"Hourlyforecast\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Hourlyforecast","forecastData","_s","storedData","setStoredData","savedData","localStorage","getItem","JSON","parse","list","setItem","stringify","dataToDisplay","slice","length","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","Date","dt","toLocaleTimeString","main","temp","_c","$RefreshReg$"],"sources":["C:/Users/eKasi Lab/Desktop/rest-api-weather-app-1/src/components/Hourlyforecast.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\n\r\nconst Hourlyforecast = ({ forecastData }) => {\r\n  const [storedData, setStoredData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    \r\n    const savedData = localStorage.getItem('forecastData');\r\n    if (savedData) {\r\n      setStoredData(JSON.parse(savedData));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    \r\n    if (forecastData && forecastData.list) {\r\n      localStorage.setItem('forecastData', JSON.stringify(forecastData));\r\n      setStoredData(forecastData);\r\n    }\r\n  }, [forecastData]);\r\n\r\n  const dataToDisplay = storedData ? storedData.list.slice(0, 4) : [];\r\n\r\n  if (dataToDisplay.length === 0) {\r\n    return <p>No forecast data available.</p>;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Hourly Forecast</h2>\r\n      <ul>\r\n        {forecastData.list.slice(0, 4).map((item) => (\r\n          <p key={item.dt}>\r\n            <p>{new Date(item.dt * 1000).toLocaleTimeString()}</p>\r\n            <p>Temperature: {item.main.temp}Â°C</p>\r\n          </p>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hourlyforecast;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IAEd,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACtD,IAAIF,SAAS,EAAE;MACbD,aAAa,CAACI,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;IACtC;EACF,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IAEd,IAAII,YAAY,IAAIA,YAAY,CAACS,IAAI,EAAE;MACrCJ,YAAY,CAACK,OAAO,CAAC,cAAc,EAAEH,IAAI,CAACI,SAAS,CAACX,YAAY,CAAC,CAAC;MAClEG,aAAa,CAACH,YAAY,CAAC;IAC7B;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,MAAMY,aAAa,GAAGV,UAAU,GAAGA,UAAU,CAACO,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE;EAEnE,IAAID,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;IAC9B,oBAAOhB,OAAA;MAAAiB,QAAA,EAAG;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC3C;EAMA,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBrB,OAAA;MAAAiB,QAAA,EACGf,YAAY,CAACS,IAAI,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACO,GAAG,CAAEC,IAAI,iBACtCvB,OAAA;QAAAiB,QAAA,gBACEjB,OAAA;UAAAiB,QAAA,EAAI,IAAIO,IAAI,CAACD,IAAI,CAACE,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC;QAAC;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtDrB,OAAA;UAAAiB,QAAA,GAAG,eAAa,EAACM,IAAI,CAACI,IAAI,CAACC,IAAI,EAAC,OAAE;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,GAFhCE,IAAI,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAClB,EAAA,CA1CIF,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AA4CpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}